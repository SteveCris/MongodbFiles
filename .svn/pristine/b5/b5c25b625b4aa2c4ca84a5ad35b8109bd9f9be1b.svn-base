logdir=logs

#环境配置
spring.profiles.active=@spring.profiles.active@
spring.application.name=api-thzlqb

#mongo地址
spring.data.mongodb.uri=@spring.data.mongodb.uri@


#spring cloud 
#注册中心地址（多个用英文逗号隔开）
eureka.client.serviceUrl.defaultZone=@eureka.client.serviceUrl.defaultZone@
# 开启健康检查（依赖spring-boot-starter-actuator）
eureka.client.healthcheck.enabled=true

management.context-path=/actuator
management.port=29000

#监控配置
#无需身份验证即可访问所有执行器端点 1.5.x版本需要加
management.security.enabled=false
#启用所有对外监控端口
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=ALWAYS

#往注册中心传自定义参数
eureka.instance.metadata-map.startup=${random.int}
# 查看源码 spring-boot-admin InstanceDiscoveryListener监听器
# 监控后台自定义
eureka.instance.metadata-map.management.context-path=${management.context-path}
# 监控后台自定义端口
eureka.instance.metadata-map.management.port=${management.port}

# 一些往注册中心 注册配置信息初始化（以ip形式展示实例）
eureka.instance.status-page-url-path=${management.context-path}/info
eureka.instance.health-check-url-path=${management.context-path}/health
eureka.instance.hostname=${spring.cloud.client.ipAddress}
eureka.instance.instance-id=${spring.cloud.client.ipAddress}:${server.port}
eureka.instance.prefer-ip-address=true
#eureka.instance.nonSecurePort=${server.port}
#手动注册，修改端口（如果外部tomcat容器情况下使用）
#spring.cloud.service-registry.auto-registration.enabled=false



#数据源配置
spring.datasource.url=@spring.datasource.url@
spring.datasource.username=@spring.datasource.username@
spring.datasource.password=@spring.datasource.password@
spring.datasource.driver-class-name=@spring.datasource.driver-class-name@

#mybatis 扫描xml文件配置
mybatis.mapperLocations=classpath:/mapper/*.xml

# pagehelper 分页插件配置
pagehelper.helperDialect=mysql
pagehelper.reasonable=true
pagehelper.supportMethodsArguments=true
pagehelper.params=count=countSql


#阿里druid配置
#连接池配置
spring.datasource.druid.initial-size=60
spring.datasource.druid.max-active=600
spring.datasource.druid.min-idle=60
#连接等待超时时间
spring.datasource.druid.max-wait=10000
#检测连接是否有效的sql
spring.datasource.druid.validation-query=select 'x'
#配置隔多久进行一次检测(检测可以关闭的空闲连接)
spring.datasource.druid.time-between-eviction-runs-millis=60000
#配置连接在池中的最小生存时间
spring.datasource.druid.min-evictable-idle-time-millis=300000

spring.datasource.druid.test-on-borrow=false
spring.datasource.druid.test-on-return=false
spring.datasource.druid.test-while-idle=true

# PSCache Mysql下建议关闭
spring.datasource.druid.pool-prepared-statements=false
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=-1

# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.filters=stat,wall,log4j

# WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
#启动项目后访问 http://127.0.0.1:8080/druid
#是否启用StatFilter默认值true
spring.datasource.druid.web-stat-filter.enabled=true
spring.datasource.druid.web-stat-filter.url-pattern=/*
spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*
##缺省sessionStatMaxCount是1000个
#spring.datasource.druid.web-stat-filter.session-stat-max-count=1000
##关闭session统计功能
#spring.datasource.druid.web-stat-filter.session-stat-enable=false
##配置principalSessionName，使得druid能够知道当前的session的用户是谁
##如果你session中保存的是非string类型的对象，需要重载toString方法
#spring.datasource.druid.web-stat-filter.principalSessionName=xxx.user
##如果user信息保存在cookie中，你可以配置principalCookieName，使得druid知道当前的user是谁
#spring.datasource.druid.web-stat-filter.principalCookieName=xxx.user
##druid 0.2.7版本开始支持profile，配置profileEnable能够监控单个url调用的sql列表。
#spring.datasource.druid.web-stat-filter.profile-enable=false

#配置StatViewServlet
#是否启用StatViewServlet默认值true
spring.datasource.druid.stat-view-servlet.enabled=true
spring.datasource.druid.stat-view-servlet.login-username=@druid.login.username@
spring.datasource.druid.stat-view-servlet.login-password=@druid.login.password@
spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
#禁用HTML页面上的“Reset All”功能
spring.datasource.druid.stat-view-servlet.reset-enable=false
#IP白名单(没有配置或者为空，则允许所有访问)
#spring.datasource.druid.stat-view-servlet.allow=127.0.0.1
#IP黑名单 (存在共同时，deny优先于allow)
#spring.datasource.druid.stat-view-servlet.deny=127.0.0.1

#开启熔断器，不开启不会熔断 相关属性配置请看 默认值移步 HystrixCommandProperties
feign.hystrix.enabled=true

#资源隔离策略 THREAD或者SEMAPHORE，一种是基于线程池，一种是信号量
hystrix.command.default.execution.isolation.strategy=SEMAPHORE
#设置调用者等待命令执行的超时限制，超过此时间，HystrixCommand被标记为TIMEOUT，并执行回退逻辑
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=10000
#达到最大并发数时，后续请求会被拒绝 信号量应该是容器（比如Tomcat）线程池一小部分，不能等于或者略小于容器线程池大小，否则起不到保护作用
hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests=2000
